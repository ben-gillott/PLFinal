1 - Reformat tag types
    a - add type in AST
type tag = Tag of string * string
type tags = Tags of tag list

    b - Implement type in lexer
e1 = expr; TAGGED; LBRACK; space = STRING; EQUALS; value = STRING; RBRACK
parse "1 tagged {space = cart}";;
TaggedExpr (Var "1", Tag ("space", "cart"))

Bit of trouble because need a tag list, but dont know how to implement in lexer. For now just using one tag.

Was issue with string / id defn. Removed id and changed defn of string to (letter char*), so it must
 start with a letter but can include numbers.
 this allows things such as:
 "(1) tagged {test:test}";;
 "(1) tagged {test1:test2}";;

 Difficulties in lexer making the tag list hard, using single tags for now.

 Working on typechecking less naievely.

 Made a function to check if tags match
    if space1 is the same as space two
        then the values must match
        if they dont match -> non valid
        if they do match -> valid
    if the spaces are not the same  -> valid
//NOTE: Prohibitive vs allowing,

let tInt : expr = Int 1;;
let tTag = Tag ("hi", "bye");;
let tTE = TaggedExpr (tInt, tTag);; 

match tTE with
    |TaggedExpr(e, Tag(t1, t2)) -> e
    |_ -> Int 1;;


Type of typ for tagged expressions is just TTagged(typ, tag)
-Retains the tag 

Issue of nested tags:
-check the top level each time
-store recursively
Tagged(Tagged(Tagged(Int))) + Tagged(Int)
how should this be typechecked
    -below is an expr so only check the top level
how should this be evaluated
    ????
    1 - discard the top tag
    2 - keep the tags forever
    3 - lists - future work

Tag + Tag = ?
If compatible, for now just take the first one
Really just need tag lists to fix this, but cant without knowing how to lex lists

Will also need to ensure that all tags given to an object dont conflict

*Show Binop match statements from typeof function

typeof Context.empty vTes;;

let vTes = Vector2(Int 1, Int 2);;

Add simple helper to the typeof function, if no context just call typeof with empty context